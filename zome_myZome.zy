
(expose "getProperty" STRING)
(defn getProperty [x] (property x))
(expose "exposedfn" STRING)
(defn exposedfn [x] (concat "result: " x))
(expose "addData" STRING)
(defn addData [x] (commit "myData" x))
(expose "addPrime" JSON)
(defn addPrime [x] (commit "primes" x))
(defn validate [entryType entry props]
  (cond (== entryType "myData")  (cond (== (mod entry 2) 0) true false)
        (== entryType "primes")  (isprime (hget entry %prime))
        (== entryType "profile") true
        false)
)

;; =========== Callbacks ===========
(defn genesis []
  (let [handle (property "_name")
        key (commit "handle" handle)]
    (put key)
    (putmeta (property "_id") key "handle")))
