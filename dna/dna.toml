# Arbitrary Application version number
Version = 0

# Automatically-generated UUID generated and inserted here by 'hc clone'
# Changing this or any part of the file will fork you into a new social organism/DHT
Id = "16459cd5-0456-11e7-9200-109add63ffcb"

# Name of the application
Name = "Cludder"

# Selection of the hashing algorithm you want to use for the DHT's address-space
HashType = "sha2-256"

# The source file for the data structure of your application properties
PropertiesSchema = "properties.json"

# Values for the schema
[Properties]
  description = "A Lisp Clutter (Distributed Twitter Clone)"
  language = "en"

# Place to acknowledge forking of prior development projects
[BasedOn]
  Name = "Clutter" # Forked from Clutter, a holochain-based Twitter clone, on March 8, 2017
  URL = "http://github.com/metacurrency/clutter"

# Every holochain may have multiple chromoZOMES which are like sub-applications
# Zomes must specify their Name, language (NucleusType), and associated data structures (schemas)
[Zomes]
  [Zomes.cludder]
    Name = "cludder"
    Description = "Clutter in Lisp"
    NucleusType = "zygo"                # Using the zygo/LISP engine
    Code = "cludder.zy"            # Filename
    [Zomes.cludder.CodeHash]            # File hash (H) on next line is automatically generated by 'hc gen chain'
      H = [18, 32, 40, 228, 39, 245, 20, 91, 62, 66, 241, 205, 133, 201, 177, 0, 81, 4, 54, 64, 26, 158, 33, 53, 174, 54, 144, 151, 167, 228, 104, 70, 243, 189]

    # Every type of entry that can be committed to your chain must be specified
    # This tells DHT nodes about each entry type so they call the validation function in the correct file (Code, above)
    [Zomes.cludder.Entries]
      [Zomes.cludder.Entries.handle]    # Someone's username
        Name = "handle"
        DataFormat = "string"
        Schema = ""                     # Link to schema filename (unused for string DataFormat)
        [Zomes.cludder.Entries.handle.SchemaHash]
          # If the DataFormat for handles were "json" instead of a string, the hash (H) of the JSON schema file would go here

      [Zomes.cludder.Entries.post]      # A post
        Name = "post"
        DataFormat = "string"
        Schema = ""
        [Zomes.cludder.Entries.post.SchemaHash]

      [Zomes.cludder.Entries.follow]    # Contains the user address (hash) of the person you want to follow
        Name = "follow"
        DataFormat = "string"
        Schema = ""
        [Zomes.cludder.Entries.follow.SchemaHash]

      [Zomes.cludder.Entries.unfollow]    # Contains the user address (hash) of the person you want to follow
        Name = "unfollow"
        DataFormat = "string"
        Schema = ""
        [Zomes.cludder.Entries.unfollow.SchemaHash]

  # Additional zome files each need their own section specifying file paths and schemas
